// Code generated by MockGen. DO NOT EDIT.
// Source: auth.go

// Package mock_auth is a generated GoMock package.
package mock_auth

import (
	context "context"
	http "net/http"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"

	auth "github.com/velmie/x/svc/http/handler/auth"
)

// MockMethod is a mock of Method interface.
type MockMethod struct {
	ctrl     *gomock.Controller
	recorder *MockMethodMockRecorder
}

// MockMethodMockRecorder is the mock recorder for MockMethod.
type MockMethodMockRecorder struct {
	mock *MockMethod
}

// NewMockMethod creates a new mock instance.
func NewMockMethod(ctrl *gomock.Controller) *MockMethod {
	mock := &MockMethod{ctrl: ctrl}
	mock.recorder = &MockMethodMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMethod) EXPECT() *MockMethodMockRecorder {
	return m.recorder
}

// Authenticate mocks base method.
func (m *MockMethod) Authenticate(ctx context.Context, token string) (auth.Entity, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Authenticate", ctx, token)
	ret0, _ := ret[0].(auth.Entity)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Authenticate indicates an expected call of Authenticate.
func (mr *MockMethodMockRecorder) Authenticate(ctx, token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Authenticate", reflect.TypeOf((*MockMethod)(nil).Authenticate), ctx, token)
}

// MockSuccessHandler is a mock of SuccessHandler interface.
type MockSuccessHandler struct {
	ctrl     *gomock.Controller
	recorder *MockSuccessHandlerMockRecorder
}

// MockSuccessHandlerMockRecorder is the mock recorder for MockSuccessHandler.
type MockSuccessHandlerMockRecorder struct {
	mock *MockSuccessHandler
}

// NewMockSuccessHandler creates a new mock instance.
func NewMockSuccessHandler(ctrl *gomock.Controller) *MockSuccessHandler {
	mock := &MockSuccessHandler{ctrl: ctrl}
	mock.recorder = &MockSuccessHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSuccessHandler) EXPECT() *MockSuccessHandlerMockRecorder {
	return m.recorder
}

// HandleSuccess mocks base method.
func (m *MockSuccessHandler) HandleSuccess(entity auth.Entity, w http.ResponseWriter, r *http.Request) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "HandleSuccess", entity, w, r)
}

// HandleSuccess indicates an expected call of HandleSuccess.
func (mr *MockSuccessHandlerMockRecorder) HandleSuccess(entity, w, r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleSuccess", reflect.TypeOf((*MockSuccessHandler)(nil).HandleSuccess), entity, w, r)
}

// MockTokenExtractor is a mock of TokenExtractor interface.
type MockTokenExtractor struct {
	ctrl     *gomock.Controller
	recorder *MockTokenExtractorMockRecorder
}

// MockTokenExtractorMockRecorder is the mock recorder for MockTokenExtractor.
type MockTokenExtractorMockRecorder struct {
	mock *MockTokenExtractor
}

// NewMockTokenExtractor creates a new mock instance.
func NewMockTokenExtractor(ctrl *gomock.Controller) *MockTokenExtractor {
	mock := &MockTokenExtractor{ctrl: ctrl}
	mock.recorder = &MockTokenExtractorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTokenExtractor) EXPECT() *MockTokenExtractorMockRecorder {
	return m.recorder
}

// Extract mocks base method.
func (m *MockTokenExtractor) Extract(r *http.Request) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Extract", r)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Extract indicates an expected call of Extract.
func (mr *MockTokenExtractorMockRecorder) Extract(r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Extract", reflect.TypeOf((*MockTokenExtractor)(nil).Extract), r)
}

// MockErrorHandler is a mock of ErrorHandler interface.
type MockErrorHandler struct {
	ctrl     *gomock.Controller
	recorder *MockErrorHandlerMockRecorder
}

// MockErrorHandlerMockRecorder is the mock recorder for MockErrorHandler.
type MockErrorHandlerMockRecorder struct {
	mock *MockErrorHandler
}

// NewMockErrorHandler creates a new mock instance.
func NewMockErrorHandler(ctrl *gomock.Controller) *MockErrorHandler {
	mock := &MockErrorHandler{ctrl: ctrl}
	mock.recorder = &MockErrorHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockErrorHandler) EXPECT() *MockErrorHandlerMockRecorder {
	return m.recorder
}

// HandleError mocks base method.
func (m *MockErrorHandler) HandleError(err error, w http.ResponseWriter, r *http.Request) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "HandleError", err, w, r)
}

// HandleError indicates an expected call of HandleError.
func (mr *MockErrorHandlerMockRecorder) HandleError(err, w, r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleError", reflect.TypeOf((*MockErrorHandler)(nil).HandleError), err, w, r)
}
