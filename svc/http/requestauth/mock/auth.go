// Code generated by MockGen. DO NOT EDIT.
// Source: auth.go

// Package mock_requestauth is a generated GoMock package.
package mock_requestauth

import (
	context "context"
	http "net/http"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"

	requestauth "github.com/velmie/x/svc/http/requestauth"
)

// MockMethod is a mock of Method interface.
type MockMethod struct {
	ctrl     *gomock.Controller
	recorder *MockMethodMockRecorder
}

// MockMethodMockRecorder is the mock recorder for MockMethod.
type MockMethodMockRecorder struct {
	mock *MockMethod
}

// NewMockMethod creates a new mock instance.
func NewMockMethod(ctrl *gomock.Controller) *MockMethod {
	mock := &MockMethod{ctrl: ctrl}
	mock.recorder = &MockMethodMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMethod) EXPECT() *MockMethodMockRecorder {
	return m.recorder
}

// Authenticate mocks base method.
func (m *MockMethod) Authenticate(ctx context.Context, token string) (requestauth.Entity, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Authenticate", ctx, token)
	ret0, _ := ret[0].(requestauth.Entity)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Authenticate indicates an expected call of Authenticate.
func (mr *MockMethodMockRecorder) Authenticate(ctx, token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Authenticate", reflect.TypeOf((*MockMethod)(nil).Authenticate), ctx, token)
}

// MockInjector is a mock of Injector interface.
type MockInjector struct {
	ctrl     *gomock.Controller
	recorder *MockInjectorMockRecorder
}

// MockInjectorMockRecorder is the mock recorder for MockInjector.
type MockInjectorMockRecorder struct {
	mock *MockInjector
}

// NewMockInjector creates a new mock instance.
func NewMockInjector(ctrl *gomock.Controller) *MockInjector {
	mock := &MockInjector{ctrl: ctrl}
	mock.recorder = &MockInjectorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockInjector) EXPECT() *MockInjectorMockRecorder {
	return m.recorder
}

// InjectAuth mocks base method.
func (m *MockInjector) InjectAuth(entity requestauth.Entity, w http.ResponseWriter, r *http.Request) (*http.Request, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InjectAuth", entity, w, r)
	ret0, _ := ret[0].(*http.Request)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InjectAuth indicates an expected call of InjectAuth.
func (mr *MockInjectorMockRecorder) InjectAuth(entity, w, r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InjectAuth", reflect.TypeOf((*MockInjector)(nil).InjectAuth), entity, w, r)
}

// MockTokenExtractor is a mock of TokenExtractor interface.
type MockTokenExtractor struct {
	ctrl     *gomock.Controller
	recorder *MockTokenExtractorMockRecorder
}

// MockTokenExtractorMockRecorder is the mock recorder for MockTokenExtractor.
type MockTokenExtractorMockRecorder struct {
	mock *MockTokenExtractor
}

// NewMockTokenExtractor creates a new mock instance.
func NewMockTokenExtractor(ctrl *gomock.Controller) *MockTokenExtractor {
	mock := &MockTokenExtractor{ctrl: ctrl}
	mock.recorder = &MockTokenExtractorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTokenExtractor) EXPECT() *MockTokenExtractorMockRecorder {
	return m.recorder
}

// Extract mocks base method.
func (m *MockTokenExtractor) Extract(r *http.Request) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Extract", r)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Extract indicates an expected call of Extract.
func (mr *MockTokenExtractorMockRecorder) Extract(r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Extract", reflect.TypeOf((*MockTokenExtractor)(nil).Extract), r)
}
