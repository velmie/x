// Code generated by MockGen. DO NOT EDIT.
// Source: hook.go
//
// Generated by this command:
//
//	mockgen -source hook.go -destination ./mock/hook.go
//
// Package mock_otelhttpx is a generated GoMock package.
package mock_otelhttpx

import (
	http "net/http"
	reflect "reflect"

	trace "go.opentelemetry.io/otel/trace"
	gomock "go.uber.org/mock/gomock"
)

// MockSpanHook is a mock of SpanHook interface.
type MockSpanHook struct {
	ctrl     *gomock.Controller
	recorder *MockSpanHookMockRecorder
}

// MockSpanHookMockRecorder is the mock recorder for MockSpanHook.
type MockSpanHookMockRecorder struct {
	mock *MockSpanHook
}

// NewMockSpanHook creates a new mock instance.
func NewMockSpanHook(ctrl *gomock.Controller) *MockSpanHook {
	mock := &MockSpanHook{ctrl: ctrl}
	mock.recorder = &MockSpanHookMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSpanHook) EXPECT() *MockSpanHookMockRecorder {
	return m.recorder
}

// Execute mocks base method.
func (m *MockSpanHook) Execute(r *http.Request, span trace.Span) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Execute", r, span)
}

// Execute indicates an expected call of Execute.
func (mr *MockSpanHookMockRecorder) Execute(r, span any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockSpanHook)(nil).Execute), r, span)
}
