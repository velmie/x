// Code generated by MockGen. DO NOT EDIT.
// Source: go.opentelemetry.io/otel/trace@v1.20.0/trace.go
//
// Generated by this command:
//
//	mockgen -source go.opentelemetry.io/otel/trace@v1.20.0/trace.go -destination ./mock/trace.go
//
// Package mock_trace is a generated GoMock package.
package mock_otelhttpx

import (
	context "context"
	reflect "reflect"

	attribute "go.opentelemetry.io/otel/attribute"
	codes "go.opentelemetry.io/otel/codes"
	trace "go.opentelemetry.io/otel/trace"
	gomock "go.uber.org/mock/gomock"
)

// MockSpan is a mock of Span interface.
type MockSpan struct {
	ctrl     *gomock.Controller
	recorder *MockSpanMockRecorder
}

// MockSpanMockRecorder is the mock recorder for MockSpan.
type MockSpanMockRecorder struct {
	mock *MockSpan
}

// NewMockSpan creates a new mock instance.
func NewMockSpan(ctrl *gomock.Controller) *MockSpan {
	mock := &MockSpan{ctrl: ctrl}
	mock.recorder = &MockSpanMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSpan) EXPECT() *MockSpanMockRecorder {
	return m.recorder
}

// AddEvent mocks base method.
func (m *MockSpan) AddEvent(name string, options ...trace.EventOption) {
	m.ctrl.T.Helper()
	varargs := []any{name}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "AddEvent", varargs...)
}

// AddEvent indicates an expected call of AddEvent.
func (mr *MockSpanMockRecorder) AddEvent(name any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{name}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddEvent", reflect.TypeOf((*MockSpan)(nil).AddEvent), varargs...)
}

// End mocks base method.
func (m *MockSpan) End(options ...trace.SpanEndOption) {
	m.ctrl.T.Helper()
	varargs := []any{}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "End", varargs...)
}

// End indicates an expected call of End.
func (mr *MockSpanMockRecorder) End(options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "End", reflect.TypeOf((*MockSpan)(nil).End), options...)
}

// IsRecording mocks base method.
func (m *MockSpan) IsRecording() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsRecording")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsRecording indicates an expected call of IsRecording.
func (mr *MockSpanMockRecorder) IsRecording() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsRecording", reflect.TypeOf((*MockSpan)(nil).IsRecording))
}

// RecordError mocks base method.
func (m *MockSpan) RecordError(err error, options ...trace.EventOption) {
	m.ctrl.T.Helper()
	varargs := []any{err}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "RecordError", varargs...)
}

// RecordError indicates an expected call of RecordError.
func (mr *MockSpanMockRecorder) RecordError(err any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{err}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecordError", reflect.TypeOf((*MockSpan)(nil).RecordError), varargs...)
}

// SetAttributes mocks base method.
func (m *MockSpan) SetAttributes(kv ...attribute.KeyValue) {
	m.ctrl.T.Helper()
	varargs := []any{}
	for _, a := range kv {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "SetAttributes", varargs...)
}

// SetAttributes indicates an expected call of SetAttributes.
func (mr *MockSpanMockRecorder) SetAttributes(kv ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetAttributes", reflect.TypeOf((*MockSpan)(nil).SetAttributes), kv...)
}

// SetName mocks base method.
func (m *MockSpan) SetName(name string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetName", name)
}

// SetName indicates an expected call of SetName.
func (mr *MockSpanMockRecorder) SetName(name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetName", reflect.TypeOf((*MockSpan)(nil).SetName), name)
}

// SetStatus mocks base method.
func (m *MockSpan) SetStatus(code codes.Code, description string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetStatus", code, description)
}

// SetStatus indicates an expected call of SetStatus.
func (mr *MockSpanMockRecorder) SetStatus(code, description any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetStatus", reflect.TypeOf((*MockSpan)(nil).SetStatus), code, description)
}

// SpanContext mocks base method.
func (m *MockSpan) SpanContext() trace.SpanContext {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SpanContext")
	ret0, _ := ret[0].(trace.SpanContext)
	return ret0
}

// SpanContext indicates an expected call of SpanContext.
func (mr *MockSpanMockRecorder) SpanContext() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SpanContext", reflect.TypeOf((*MockSpan)(nil).SpanContext))
}

// TracerProvider mocks base method.
func (m *MockSpan) TracerProvider() trace.TracerProvider {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TracerProvider")
	ret0, _ := ret[0].(trace.TracerProvider)
	return ret0
}

// TracerProvider indicates an expected call of TracerProvider.
func (mr *MockSpanMockRecorder) TracerProvider() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TracerProvider", reflect.TypeOf((*MockSpan)(nil).TracerProvider))
}

// span mocks base method.
func (m *MockSpan) span() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "span")
}

// span indicates an expected call of span.
func (mr *MockSpanMockRecorder) span() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "span", reflect.TypeOf((*MockSpan)(nil).span))
}

// MockTracer is a mock of Tracer interface.
type MockTracer struct {
	ctrl     *gomock.Controller
	recorder *MockTracerMockRecorder
}

// MockTracerMockRecorder is the mock recorder for MockTracer.
type MockTracerMockRecorder struct {
	mock *MockTracer
}

// NewMockTracer creates a new mock instance.
func NewMockTracer(ctrl *gomock.Controller) *MockTracer {
	mock := &MockTracer{ctrl: ctrl}
	mock.recorder = &MockTracerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTracer) EXPECT() *MockTracerMockRecorder {
	return m.recorder
}

// Start mocks base method.
func (m *MockTracer) Start(ctx context.Context, spanName string, opts ...trace.SpanStartOption) (context.Context, trace.Span) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, spanName}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Start", varargs...)
	ret0, _ := ret[0].(context.Context)
	ret1, _ := ret[1].(trace.Span)
	return ret0, ret1
}

// Start indicates an expected call of Start.
func (mr *MockTracerMockRecorder) Start(ctx, spanName any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, spanName}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockTracer)(nil).Start), varargs...)
}

// tracer mocks base method.
func (m *MockTracer) tracer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "tracer")
}

// tracer indicates an expected call of tracer.
func (mr *MockTracerMockRecorder) tracer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "tracer", reflect.TypeOf((*MockTracer)(nil).tracer))
}

// MockTracerProvider is a mock of TracerProvider interface.
type MockTracerProvider struct {
	ctrl     *gomock.Controller
	recorder *MockTracerProviderMockRecorder
}

// MockTracerProviderMockRecorder is the mock recorder for MockTracerProvider.
type MockTracerProviderMockRecorder struct {
	mock *MockTracerProvider
}

// NewMockTracerProvider creates a new mock instance.
func NewMockTracerProvider(ctrl *gomock.Controller) *MockTracerProvider {
	mock := &MockTracerProvider{ctrl: ctrl}
	mock.recorder = &MockTracerProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTracerProvider) EXPECT() *MockTracerProviderMockRecorder {
	return m.recorder
}

// Tracer mocks base method.
func (m *MockTracerProvider) Tracer(name string, options ...trace.TracerOption) trace.Tracer {
	m.ctrl.T.Helper()
	varargs := []any{name}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Tracer", varargs...)
	ret0, _ := ret[0].(trace.Tracer)
	return ret0
}

// Tracer indicates an expected call of Tracer.
func (mr *MockTracerProviderMockRecorder) Tracer(name any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{name}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Tracer", reflect.TypeOf((*MockTracerProvider)(nil).Tracer), varargs...)
}

// tracerProvider mocks base method.
func (m *MockTracerProvider) tracerProvider() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "tracerProvider")
}

// tracerProvider indicates an expected call of tracerProvider.
func (mr *MockTracerProviderMockRecorder) tracerProvider() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "tracerProvider", reflect.TypeOf((*MockTracerProvider)(nil).tracerProvider))
}
